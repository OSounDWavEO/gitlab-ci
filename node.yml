include:
  - local: jobs/sonarqube.yml
  - local: jobs/build_docker.yml

stages:
  - install_dependencies
  - test
  - test_report
  - build
  - build_docker
  - release

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_REF_PROTECTED == "true"

variables:
  BUILDER_IMAGE: node:latest
  STATIC_DIR: build

.builder:
  image: ${BUILDER_IMAGE}

check-package-manager:
  image: alpine
  stage: .pre
  script:
    - LOCK_COUNT=0
    - |
      for LOCK_FILE in yarn.lock package-lock.json pnpm-lock.yaml
      do
        if [ -f ${LOCK_FILE} ]; then
          echo "found package lock file - ${LOCK_FILE}"
          LOCK_COUNT=`expr $LOCK_COUNT + 1`
        fi
      done
    - |
      if [ ${LOCK_COUNT} -eq 0 ]; then
        echo "package lock file not found. cannot build"
        exit 1
      fi
    - |
      if [ ${LOCK_COUNT} -gt 1 ]; then
        echo "found more than one package lock files. package management ambiguous"
        exit 1
      fi

.install-web-dependency:
  stage: install_dependencies
  extends: .builder
  needs: [check-package-manager]
  before_script:
    - 'echo "Builder image: ${BUILDER_IMAGE}"'
    - 'echo "Node version: $(node -v)"'

install-yarn-dependency:
  extends: .install-web-dependency
  script:
    - yarn config set cache-folder $(pwd)/.yarn
    - yarn add --dev jest-junit;
    - yarn install
  cache:
    - key:
        files:
          - yarn.lock
      paths:
        - node_modules
    - key: yarn-$CI_JOB_IMAGE
      paths:
        - .yarn
  rules:
    - exists:
      - yarn.lock

install-npm-dependency:
  extends: .install-web-dependency
  script:
    - npm install --save-dev jest-junit --cache .npm --prefer-offline;
    - npm install --cache .npm --prefer-offline
  cache:
    - key:
        files:
          - package-lock.json
      paths:
        - node_modules
    - key: npm-$CI_JOB_IMAGE
      paths:
        - .npm
  rules:
    - exists:
      - package-lock.json

install-pnpm-dependency:
  extends: .install-web-dependency
  script:
    - yarn global add pnpm
    - pnpm config set store-dir $(pwd)/.pnpm-store
    - pnpm add --save-dev jest-junit
    - pnpm install
  cache:
    - key:
        files:
          - pnpm-lock.yaml
      paths:
        - node_modules
    - key: npm-$CI_JOB_IMAGE
      paths:
        - .pnpm-store
  rules:
    - exists:
      - pnpm-lock.yaml

.test-web:
  stage: test
  extends: .builder
  before_script:
    - 'echo "Builder image: ${BUILDER_IMAGE}"'
    - 'echo "Node version: $(node -v)"'
  artifacts:
    reports:
      junit: junit.xml
      cobertura: coverage/cobertura-coverage.xml
    paths:
      - coverage/lcov.info
    # avaliable in Gitlab 14.10
    # coverage_report:
    #   coverage_format: cobertura
    #   path: coverage/cobertura-coverage.xml
    expire_in: 1 hour
    when: always
  coverage: '/All files[^|]*\|[^|]*\s+([\d\.]+)/'

test-yarn:
  extends: .test-web
  needs: [install-yarn-dependency]
  script:
    - yarn test --ci --watchAll=false --coverage --reporters=default --reporters=jest-junit --coverageReporters=lcov --coverageReporters=cobertura
  cache:
    - key:
        files:
          - yarn.lock
      paths:
        - node_modules
      policy: pull
  rules:
    - if: $DISABLE_TEST != "true"
    - exists:
      - yarn.lock

test-npm:
  extends: .test-web
  needs: [install-npm-dependency]
  script:
    - npm run test -- --ci --watchAll=false --coverage --reporters=default --reporters=jest-junit --coverageReporters=lcov --coverageReporters=cobertura
  cache:
    - key:
        files:
          - package-lock.json
      paths:
        - node_modules
      policy: pull
  rules:
    - if: $DISABLE_TEST != "true"
    - exists:
      - package-lock.json

test-pnpm:
  extends: .test-web
  needs: [install-pnpm-dependency]
  script:
    - yarn global add pnpm
    - pnpm test --ci --watchAll=false --coverage --reporters=default --reporters=jest-junit --coverageReporters=lcov --coverageReporters=cobertura
  cache:
    - key:
        files:
          - pnpm-lock.yaml
      paths:
        - node_modules
      policy: pull
  rules:
    - if: $DISABLE_TEST != "true"
    - exists:
      - pnpm-lock.yaml

sonarqube-analysis-branch:
  extends: .sonarqube-analysis-brnach
  needs:
    - job: test-yarn
      optional: true
    - job: test-npm
      optional: true
    - job: test-pnpm
      optional: true

sonarqube analysis mr:
  extends: .sonarqube-analysis-mr
  needs:
    - job: test-yarn
      optional: true
    - job: test-npm
      optional: true
    - job: test-pnpm
      optional: true

.build-web-static:
  environment: $CI_COMMIT_REF_SLUG
  stage: build
  extends: .builder
  before_script:
    - 'echo "Builder image: ${BUILDER_IMAGE}"'
    - 'echo "Node version: $(node -v)"'
    - if [ ! -z "${BUILD_ENV}" ]; then
        cat ${BUILD_ENV};
        source ${BUILD_ENV};
      fi
  artifacts:
    paths:
      - ${STATIC_DIR}
    expire_in: 1 hour
  rules:
    - if: $CI_PIPELINE_SOURCE != "merge_request_event"

build-yarn:
  extends: .build-web-static
  needs:
    - job: test-yarn
      optional: true
  script:
    - yarn build
  cache:
    - key:
        files:
          - yarn.lock
      paths:
        - node_modules
      policy: pull
  rules:
    - exists:
      - yarn.lock

build-npm:
  extends: .build-web-static
  needs:
    - job: test-bpm
      optional: true
  script:
    - npm run build
  cache:
    - key:
        files:
          - package-lock.json
      paths:
        - node_modules
      policy: pull
  rules:
    - exists:
      - package-lock.json

build-pnpm:
  extends: .build-web-static
  needs:
    - job: test-pnpm
      optional: true
  script:
    - yarn global add pnpm
    - pnpm run build
  cache:
    - key:
        files:
          - pnpm-lock.yaml
      paths:
        - node_modules
      policy: pull
  rules:
    - exists:
      - pnpm-lock.yaml

build-docker:
  extends: .build-docker
  needs:
    - job: build-yarn
      optional: true
    - job: build-npm
      optional: true
    - job: build-pnpm
      optional: true
  before_script:
    - if [ ! -f ${DOCKERFILE_PATH} ]; then
        echo "${DOCKERFILE_PATH} not exist, create one";
        if [ ! -d ${STATIC_DIR} ]; then
          echo "static files not found"; exit 1;
        fi;
        STATIC_DIR=${STATIC_DIR} scripts/create-web-dockerfile.sh;
      else
        echo -e "\e[33muse local Dockerfile from ${DOCKERFILE_PATH}\e[0m";
        if [ "${DOCKERFILE_PATH}" != "Dockerfile" ]; then cp -f ${DOCKERFILE_PATH} Dockerfile; fi;
      fi

deploy:
  environment: $CI_COMMIT_REF_SLUG
  stage: release
  image: alpine
  needs: [build-docker]
  before_script:
    - 'which ssh-agent || (apk add --update --no-cache openssh-client)'
    - mkdir -p ~/.ssh
    - eval $(ssh-agent -s)
    - chmod 400 "${SSH_PRIVATE_KEY}"
    - ssh-add "${SSH_PRIVATE_KEY}"
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    - STS_FILE=${K8S_MANIFEST_DIR}/sts-${CI_PROJECT_NAME}.yml
  script:
    - |
      if ! ssh -q ${SSH_CONNECTION} stat ${STS_FILE} \> /dev/null 2\>\&1; then
        ssh ${SSH_CONNECTION} "mkdir -p ${K8S_MANIFEST_DIR}"
        scp scripts/generate_web_k8s_manifest.sh ${SSH_CONNECTION}:${K8S_MANIFEST_DIR}
        ssh ${SSH_CONNECTION} "chmod +x generate_web_k8s_manifest.sh && kubectl apply -f svc-${CI_PROJECT_NAME}.yml"
      fi
    - scp scripts/deploy_web.sh "${SSH_CONNECTION}:"
    - ssh ${SSH_CONNECTION} "chmod +x deploy_web.sh && ./deploy_web.sh ${STS_FILE} ${FULL_IMAGE}"
  rules: 
    - if: $CI_COMMIT_BRANCH =~ $DEPLOY_BRANCH && $CI_PIPELINE_SOURCE != "merge_request_event" && $DISABLE_PUSH != "true"
